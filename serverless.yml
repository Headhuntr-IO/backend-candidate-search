org: lbibera
app: headhuntr
service: candidate-search

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  apiGateway:
    restApiId:
      'Fn::ImportValue': sls-${self:custom.sharedService}-${sls:stage}-PlatformAPIGateway-restApiId
    restApiRootResourceId:
      'Fn::ImportValue': sls-${self:custom.sharedService}-${sls:stage}-PlatformAPIGateway-rootResourceId
  tracing:
    lambda: true
  environment:
    CANDIDATE_SEARCH_TABLE_NAME: !Ref userSearchTable
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
          Resource:
            Fn::GetAtt: [ userSearchTable, Arn ]

plugins:
  - serverless-plugin-lambda-insights

custom:
  sharedService: shared
  lambdaInsights:
    defaultLambdaInsights: true

package:
  patterns:
    - '!README.md'

functions:
  create:
    handler: create.handle
    events:
      - http:
          method: POST
          path: /candidate-search
    layers:
      - 'Fn::ImportValue': sls-${self:custom.sharedService}-${sls:stage}-PythonsharedLambdaLayerQualifiedArn

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
 Resources:
  userSearchTable:
     Type: AWS::DynamoDB::Table
     Properties:
       TableName: ${sls:stage}_user_search
       AttributeDefinitions:
         - AttributeName: id
           AttributeType: S
       KeySchema:
         - AttributeName: id
           KeyType: HASH
       ProvisionedThroughput:
         ReadCapacityUnits: 1
         WriteCapacityUnits: 1
 Outputs:
  CandidateSearchTableName:
    Description: "The DynamoDB Table name for storing Candidate Search details"
    Value:
      Ref: userSearchTable
    Export:
      Name: !Sub "${AWS::StackName}-CandidateSearchTableName"
